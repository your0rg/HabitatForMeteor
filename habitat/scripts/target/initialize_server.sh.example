#!/usr/bin/env bash
#
set -e;

declare PRTY=" TGTSRV  --> ";
function initialize_server()
{
  export LOG=/tmp/HabitatPreparation.log;
  if [[ -f ${LOG} ]]; then
    sudo -A chmod ugo+rw ${LOG};
  else
    touch ${LOG};
  fi;

  echo -e "Server Preparations Log :: $(date)
  =======================================================" > ${LOG};
  echo -e "\n${PRTY} Perform your server initializations here."  | tee -a ${LOG};

  echo -e "PG_BKP -- ${PG_BKP}";
  echo -e "PG_UID -- ${PG_UID}";
  echo -e "PG_PWD -- ${PG_PWD}";
  if [[ -z ${PG_BKP} ]]; then
    echo -e "${PRTY} No PostgreSQL seed URL was specified. Skipping ...";
  else

    declare IB_SCHEMA="iridiumblue";

    export METSQL='psql -h localhost -d meteor';

#    ${METSQL} -tc "DROP SCHEMA ${IB_SCHEMA} CASCADE" 2>/dev/null;
    ${METSQL} -tc "CREATE SCHEMA IF NOT EXISTS ${IB_SCHEMA}";

    declare COUNT_IRIDIUM_BLUE_TABLES="SELECT count(table_name) FROM information_schema.tables WHERE table_schema = '${IB_SCHEMA}'";
    declare NUM_IRIDIUM_BLUE_TABLES=$(${METSQL} -tc "${COUNT_IRIDIUM_BLUE_TABLES}" | xargs);

    if [[ 0 < ${NUM_IRIDIUM_BLUE_TABLES} ]]; then
      echo -e "${PRTY} Schema, '${IB_SCHEMA}', has tables already. Skipping..." ;
    else
      echo -e "${PRTY} Downloading and restoring PostgreSQL seed from URL ...";

      # rm -f pgres_seed.sql;
      curl -z pgres_seed.sql -L -o pgres_seed.sql ${PG_BKP} ;
      ls -l pgres_seed.sql;
      declare SCHEMA_OWNER=$(cat pgres_seed.sql \
        | grep "ALTER SCHEMA .* OWNER TO .*;"  \
        | grep -oh "TO .*;"  \
        | cut -d " " -f 2  \
        | cut -d ";" -f 1);
      echo -e "${PRTY} Creating schema owner '${SCHEMA_OWNER}' if not exists";
      export SCHEMA_USER=$(${METSQL} -tc "SELECT usename FROM pg_user WHERE usename = '${SCHEMA_OWNER}'" | xargs);
      if [[ -z  ${SCHEMA_USER} ]]; then
        ${METSQL} -tc "CREATE USER ${PG_UID} WITH PASSWORD '${PG_PWD}'";
        ${METSQL} -tc "GRANT ALL PRIVILEGES ON SCHEMA ${IB_SCHEMA} TO  ${PG_UID}";
      fi;
      ${METSQL} -qf pgres_seed.sql &>/dev/null;

      echo -e "${PRTY} Database sown ...";
    fi;
  fi;

  echo -e "\n${PRTY} Server initialized."  | tee -a ${LOG};
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then

  export  PG_DB=$(cat ./settings.json | jq -r .PG_DB);
  export PG_UID=$(cat ./settings.json | jq -r .PG_UID);
  export PG_PWD=$(cat ./settings.json | jq -r .PG_PWD);
  export PG_HST=$(cat ./settings.json | jq -r .PG_HST);
  export PG_BKP=$(cat ./settings.json | jq -r .PG_BKP);

  initialize_server;

fi;
