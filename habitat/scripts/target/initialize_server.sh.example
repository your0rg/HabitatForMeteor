#!/usr/bin/env bash
#
set -e;

declare PRTY=" TGTSRV  --> ";
function initialize_server()
{
  export LOG=/tmp/HabitatPreparation.log;
  if [[ -f ${LOG} ]]; then
    sudo -A chmod ugo+rw ${LOG};
  else
    touch ${LOG};
  fi;

  echo -e "Server Preparations Log :: $(date)
  =======================================================" > ${LOG};
  echo -e "\n${PRTY} Perform your server initializations here."  | tee -a ${LOG};

  echo -e "PG_BKP -- ${PG_BKP}";
  echo -e "PG_UID -- ${PG_UID}";
  echo -e "PG_PWD -- ${PG_PWD}";
  declare SEED_FILE="pgres_seed.sql";
  if [[ -z ${PG_BKP} ]]; then
    echo -e "${PRTY} No PostgreSQL seed URL was specified. Skipping ...";
  else
    echo -e "${PRTY} Downloading and restoring PostgreSQL seed from URL ...
    to have internal standard name '${SEED_FILE}'";

    # rm -f ${SEED_FILE};
    curl -z ${SEED_FILE} -L -o ${SEED_FILE} ${PG_BKP} ;
    ls -l ${SEED_FILE};
    declare SCHEMA_NAME=$(cat ${SEED_FILE} \
      | grep -m 1 -Poh "(?<=\bSCHEMA\s)(\w+)" );

    declare SCHEMA_OWNER=$(cat ${SEED_FILE} \
      | grep "ALTER .* OWNER TO .*;"  \
      | grep -m 1 -oh "TO .*;"  \
      | cut -d " " -f 2  \
      | cut -d ";" -f 1);

    export METSQL='psql -h localhost -d meteor';

    echo -e "${PRTY} Creating Meteor app user '${PG_UID}' if not exists";
    SCHEMA_USER=$(${METSQL} -tc "SELECT usename FROM pg_user WHERE usename = '${PG_UID}'" | xargs);
    if [[ -z  ${SCHEMA_USER} ]]; then
      ${METSQL} -tc "CREATE USER ${PG_UID} WITH PASSWORD '${PG_PWD}'";
      ${METSQL} -tc "GRANT ALL PRIVILEGES ON SCHEMA ${SCHEMA_NAME} TO  ${PG_UID}";
    fi;

    if [[ -z ${SCHEMA_NAME} ]]; then
      echo -e "No schema name specified... >${SCHEMA_NAME}<";
      SCHEMA_NAME="public";
    else
      echo -e "Specified schema name... >${SCHEMA_NAME}<";
      # ${METSQL} -tc "DROP SCHEMA ${SCHEMA_NAME} CASCADE" 2>/dev/null;
      ${METSQL} -tc "CREATE SCHEMA IF NOT EXISTS ${SCHEMA_NAME}";
    fi;

    export SCHEMA_USER="";
    if [[ -z ${SCHEMA_OWNER} ]]; then
      echo -e "No schema owner specified... >${SCHEMA_OWNER}<";
    else
      echo -e "${PRTY} Creating schema owner '${SCHEMA_OWNER}' if not exists";
      SCHEMA_USER=$(${METSQL} -tc "SELECT usename FROM pg_user WHERE usename = '${SCHEMA_OWNER}'" | xargs);
      if [[ -z  ${SCHEMA_USER} ]]; then
        ${METSQL} -tc "CREATE USER ${SCHEMA_OWNER}";
        ${METSQL} -tc "GRANT ALL PRIVILEGES ON SCHEMA ${SCHEMA_NAME} TO  ${SCHEMA_OWNER}";
      fi;
    fi;


    declare COUNT_SCHEMA_TABLES="SELECT count(table_name) FROM information_schema.tables WHERE table_schema = '${SCHEMA_NAME}'";
    declare NUM_SCHEMA_TABLES=$(${METSQL} -tc "${COUNT_SCHEMA_TABLES}" | xargs);
    if [[ 0 < ${NUM_SCHEMA_TABLES} ]]; then
      echo -e "${PRTY} Schema, '${SCHEMA_NAME}', has tables already. Skipping..." ;
    else
      echo -e "${PRTY} Restoring PostgreSQL from seed file, '${SEED_FILE}'.";

      ${METSQL} -qf ${SEED_FILE} &>/dev/null;

      echo -e "${PRTY} Database sown ...";
    fi;


  fi;

  echo -e "\n${PRTY} Server initialized."  | tee -a ${LOG};
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then

  export  PG_DB=$(cat ./settings.json | jq -r .PG_DB);
  export PG_UID=$(cat ./settings.json | jq -r .PG_UID);
  export PG_PWD=$(cat ./settings.json | jq -r .PG_PWD);
  export PG_HST=$(cat ./settings.json | jq -r .PG_HST);
  export PG_BKP=$(cat ./settings.json | jq -r .PG_BKP);

  initialize_server;

fi;

